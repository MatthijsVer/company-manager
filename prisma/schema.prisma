generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  INVITED
}

enum OrgRole {
  OWNER
  ADMIN
  PROJECT_MANAGER
  HR
  FINANCE
  MEMBER
  CONTRACTOR
  CLIENT
}

/**
 * NEW: 2SV method + token purpose *
 */
enum TwoFactorMethod {
  EMAIL
  TOTP
}

enum TwoFactorPurpose {
  ENABLE // verify during enabling 2SV
  LOGIN // verify during login
  RECOVERY // optional: future use
}

enum CompanyStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
  PENDING
}

enum CompanyType {
  PROSPECT
  CLIENT
  PARTNER
  VENDOR
  PAST_CLIENT
}

enum ProductType {
  PRODUCT
  SERVICE
  BUNDLE
}

enum UnitKind {
  UNIT
  HOUR
  DAY
  MONTH
  YEAR
  KM
  MB
  GB
  CUSTOM
}

enum PriceBasis {
  EXCLUSIVE
  INCLUSIVE
}

enum CurrencyStrategy {
  ORG_DEFAULT
  FIXED
  PER_PRICEBOOK
}

enum QuoteStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
  CANCELLED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  PARTIAL
  OVERDUE
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CHECK
  BANK_TRANSFER
  CREDIT_CARD
  OTHER
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  emailVerified   DateTime?
  passwordHash    String?
  name            String?
  firstName       String?
  lastName        String?
  image           String?
  phone           String?
  locale          String?
  timezone        String?
  status          UserStatus       @default(ACTIVE)
  assignedTasks   Task[]           @relation("TaskAssignee")
  reportedTasks   Task[]           @relation("TaskReporter")
  taskComments    TaskComment[]
  taskAttachments TaskAttachment[]

  /**
   * 2-Step Verification core flags *
   */
  twoFactorEnabled         Boolean          @default(false)
  twoFactorMethod          TwoFactorMethod?
  twoFactorEmailVerifiedAt DateTime? // set when email 2SV is confirmed
  // (Optional future TOTP support)
  totpSecret               String?
  backupCodes              String?

  preferences  Json?
  lastLoginAt  DateTime?
  lastActiveAt DateTime?

  // Auth providers & sessions (NextAuth-style)
  accounts Account[]
  sessions Session[]

  // Multi-tenant
  memberships Membership[]
  invitesSent Invite[]     @relation("InvitesSent")
  invitesRecv Invite[]     @relation("InvitesReceived")

  companyNotes      CompanyNote[]
  companyDocuments  CompanyDocument[]
  companyActivities CompanyActivity[]
  boardPermissions  BoardPermission[]

  // Invoice relations
  createdInvoices Invoice[] @relation("InvoiceCreator")
  updatedInvoices Invoice[] @relation("InvoiceUpdater")
  payments        Payment[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  TwoFactorToken TwoFactorToken[]

  auditLogs              AuditLog[]
  companyAssignments     CompanyAssignment[]
  timeEntries            TimeEntry[]
  organizationDocuments  OrganizationDocument[]
  organizationCategories OrganizationCategory[]

  createdFolders       Folder[]              @relation("FolderCreator")
  uploadedDocuments    Document[]            @relation("DocumentUploader")
  folderPermissions    FolderPermission[]
  documentPermissions  DocumentPermission[]
  folderCompanyLinks   FolderCompanyLink[]
  documentCompanyLinks DocumentCompanyLink[]
  documentActivities   DocumentActivity[]

  KanbanBoardConfig KanbanBoardConfig[]

  Meeting Meeting[]

  MeetingParticipant MeetingParticipant[]

  RateCardItem RateCardItem[]
}

/**
 * NEW: per-user one-time code, stored as a hash (never the raw code) *
 */
model TwoFactorToken {
  id         String           @id @default(cuid())
  userId     String
  purpose    TwoFactorPurpose
  codeHash   String // hash of the numeric code (e.g., bcrypt/argon2)
  expiresAt  DateTime
  consumedAt DateTime?
  createdAt  DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, purpose])
  @@index([expiresAt])
}

model Organization {
  id          String       @id @default(cuid())
  name        String
  slug        String       @unique
  locale      String       @default("nl-NL")
  currency    String       @default("EUR")
  branding    Json?
  memberships Membership[]
  invites     Invite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companies    Company[]
  customFields CustomFieldDefinition[]
  auditLogs    AuditLog[]

  roleColorSettings RoleColorSettings?

  Task    Task[]
  Invoice Invoice[]

  folders   Folder[]
  documents Document[]

  OrganizationDocument OrganizationDocument[]

  OrganizationCategory OrganizationCategory[]

  KanbanBoardConfig KanbanBoardConfig[]

  Meeting Meeting[]

  TaxRule TaxRule[]

  TaxClass TaxClass[]

  RateCard RateCard[]

  PriceBook PriceBook[]

  Product Product[]

  ProductCategory ProductCategory[]

  Unit Unit[]

  CatalogSettings CatalogSettings[]
  Quote           Quote[]

  Payment Payment[]
}

model Membership {
  id             String  @id @default(cuid())
  userId         String
  organizationId String
  role           OrgRole @default(MEMBER)
  title          String?
  isDefault      Boolean @default(false)

  user         User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization           @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  documents    OrganizationDocument[]
  categories   OrganizationCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, organizationId])
  @@index([organizationId, role])
}

enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REVOKED
}

model Invite {
  id             String       @id @default(cuid())
  organizationId String
  email          String
  role           OrgRole
  token          String       @unique
  inviterId      String?
  inviteeId      String?
  status         InviteStatus @default(PENDING)
  expiresAt      DateTime?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inviter      User?        @relation("InvitesSent", fields: [inviterId], references: [id], onDelete: SetNull)
  invitee      User?        @relation("InvitesReceived", fields: [inviteeId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email, organizationId])
}

// --- NextAuth-compatible models (optional but handy) ---

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id             String  @id @default(cuid())
  organizationId String
  name           String
  slug           String?

  // Contact Info
  email   String?
  phone   String?
  website String?
  address Json?

  // Business Info
  industry      String?
  size          String? // "1-10", "11-50", etc.
  annualRevenue String?
  description   String? @db.Text

  // Status & Classification
  status CompanyStatus @default(ACTIVE)
  type   CompanyType   @default(PROSPECT)
  tags   String? // Comma-separated or JSON array
  rating Int? // 1-5 stars

  color      String?
  isFavorite Boolean @default(false)
  priority   String?

  // Existing fields
  customFields Json?
  metadata     Json?

  // Relations
  organization Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  notes        CompanyNote[]
  contacts     CompanyContact[]
  documents    CompanyDocument[]
  activities   CompanyActivity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?

  assignedUsers CompanyAssignment[]

  timeEntries       TimeEntry[]
  tasks             Task[]
  linkedFolders     FolderCompanyLink[]
  linkedDocuments   DocumentCompanyLink[]
  KanbanBoardConfig KanbanBoardConfig[]
  Meeting           Meeting[]
  invoices          Invoice[]
  quotes            Quote[]

  @@unique([organizationId, slug])
  @@index([organizationId])
  @@index([organizationId, status])
  @@index([organizationId, type])
  @@index([organizationId, isFavorite])
}

model CustomFieldDefinition {
  id             String  @id @default(cuid())
  organizationId String
  entityType     String // "company", "invoice", etc.
  fieldKey       String // Unique key for the field
  fieldLabel     String // Display name
  fieldType      String // "text", "number", "date", "select", etc.
  required       Boolean @default(false)
  options        Json? // For select/multiselect fields
  validation     Json? // Validation rules
  displayOrder   Int     @default(0)
  isActive       Boolean @default(true)

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organizationId, entityType, fieldKey])
  @@index([organizationId, entityType])
}

model AuditLog {
  id             String  @id @default(cuid())
  organizationId String
  userId         String
  userEmail      String
  action         String // "create", "update", "delete", "view"
  entityType     String // "company", "invoice", etc.
  entityId       String
  entityName     String? // For quick reference
  changes        Json? // { before: {}, after: {} }
  metadata       Json? // IP, user agent, etc.

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@index([organizationId, entityType, entityId])
  @@index([organizationId, userId])
  @@index([createdAt])
}

model CompanyNote {
  id        String  @id @default(cuid())
  companyId String
  userId    String
  content   String  @db.Text
  category  String? // "general", "meeting", "call", "email", etc.
  isPinned  Boolean @default(false)
  metadata  Json? // attachments, mentions, etc.

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  meetingId String?
  meeting   Meeting? @relation(fields: [meetingId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId, createdAt])
  @@index([companyId, category])
}

model CompanyContact {
  id            String    @id @default(cuid())
  companyId     String
  name          String
  title         String?
  email         String?
  phone         String?
  isPrimary     Boolean   @default(false)
  department    String?
  notes         String?   @db.Text
  lastContactAt DateTime?
  metadata      Json? // social links, preferences, etc.

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  MeetingParticipant MeetingParticipant[]
  invoices           Invoice[]
  quotes             Quote[]

  @@index([companyId])
  @@index([email])
}

model CompanyDocument {
  id          String  @id @default(cuid())
  companyId   String
  uploadedBy  String
  fileName    String
  fileUrl     String
  fileSize    Int
  mimeType    String
  category    String? // "contract", "proposal", "invoice", etc.
  description String?
  metadata    Json? // version, tags, etc.

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [uploadedBy], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId, category])
  @@index([companyId, createdAt])
}

model CompanyActivity {
  id          String @id @default(cuid())
  companyId   String
  userId      String
  type        String // "note_added", "contact_added", "status_changed", etc.
  description String
  metadata    Json? // Additional context data

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@index([companyId, createdAt])
  @@index([companyId, type])
}

model CompanyAssignment {
  id          String  @id @default(cuid())
  companyId   String
  userId      String
  role        String? // "Account Manager", "Sales Rep", "Support"
  isPrimary   Boolean @default(false) // Primary contact for company
  permissions Json? // {"canEdit": true, "canDelete": false}
  notes       String? @db.Text

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  assignedAt DateTime @default(now())
  assignedBy String? // Who assigned this user

  @@unique([companyId, userId])
  @@index([userId])
  @@index([companyId, isPrimary])
}

model RoleColorSettings {
  id             String @id @default(cuid())
  organizationId String @unique
  colors         Json // Stores role color mappings

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
}

model TimeEntry {
  id          String    @id @default(cuid())
  userId      String
  companyId   String?
  description String
  startTime   DateTime
  endTime     DateTime?
  duration    Int // Duration in seconds
  isRunning   Boolean   @default(false)
  isInternal  Boolean   @default(false)
  isBillable  Boolean   @default(true)

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  task    Task?    @relation(fields: [taskId], references: [id], onDelete: SetNull)

  taskId String?
  tags   String? // Comma-separated tags
  notes  String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, startTime])
  @@index([companyId])
  @@index([taskId])
  @@index([isRunning])
}

model Task {
  id             String  @id @default(cuid())
  organizationId String
  companyId      String?
  name           String
  description    String? @db.Text

  // Enhanced fields for proper task management
  assignedToId String?
  reporterId   String
  dueDate      DateTime?
  startDate    DateTime?
  completedAt  DateTime?

  status         String       @default("TODO")
  priority       TaskPriority @default(MEDIUM)
  estimatedHours Float?
  actualHours    Float?

  // For kanban positioning
  columnId    String? // Which kanban column
  position    Int     @default(0)
  columnOrder Int     @default(0)

  // For subtasks
  parentTaskId String?

  // Additional metadata
  labels       String? // JSON array of labels
  customFields Json?

  // Relations
  organization Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  company      Company?           @relation(fields: [companyId], references: [id], onDelete: SetNull)
  assignedTo   User?              @relation("TaskAssignee", fields: [assignedToId], references: [id])
  reporter     User               @relation("TaskReporter", fields: [reporterId], references: [id])
  parentTask   Task?              @relation("Subtasks", fields: [parentTaskId], references: [id])
  subtasks     Task[]             @relation("Subtasks")
  timeEntries  TimeEntry[]
  comments     TaskComment[]
  attachments  TaskAttachment[]
  boardId      String?
  board        KanbanBoardConfig? @relation(fields: [boardId], references: [id])

  meetingId String?
  meeting   Meeting? @relation(fields: [meetingId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
  @@index([companyId])
  @@index([status])
  @@index([assignedToId])
  @@index([columnId, position])
}

model TaskComment {
  id      String @id @default(cuid())
  taskId  String
  userId  String
  content String @db.Text

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([taskId])
}

model TaskAttachment {
  id       String @id @default(cuid())
  taskId   String
  userId   String
  fileName String
  fileUrl  String
  fileSize Int
  mimeType String

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@index([taskId])
}

// enum TaskStatus {
//   TODO
//   IN_PROGRESS
//   REVIEW
//   COMPLETED
//   ARCHIVED
// }

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model OrganizationDocument {
  id             String  @id @default(cuid())
  organizationId String
  uploadedBy     String
  category       String
  fileName       String
  fileSize       Int
  fileUrl        String
  mimeType       String
  description    String? @db.Text

  // Enhanced features
  tags       String? // JSON array of tags
  isStarred  Boolean @default(false)
  isTemplate Boolean @default(false)
  version    Int     @default(1)

  // Metadata for advanced features
  metadata Json? // Can store version history, permissions, etc.

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [uploadedBy], references: [id])

  // Many-to-many relation with companies

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Membership Membership[]

  @@index([organizationId, category])
  @@index([organizationId, isTemplate])
  @@index([organizationId, isStarred])
  @@index([organizationId, createdAt])
}

model OrganizationCategory {
  id             String   @id @default(cuid())
  organizationId String
  name           String
  description    String?
  createdBy      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator      User         @relation(fields: [createdBy], references: [id])
  Membership   Membership[]

  @@unique([organizationId, name])
  @@index([organizationId])
}

model KanbanBoardConfig {
  id             String  @id @default(cuid())
  organizationId String
  companyId      String?
  name           String  @default("Default Board")
  settings       Json // Stores the entire settings object
  isDefault      Boolean @default(false)
  isPublic       Boolean @default(true) // If true, all company members can view
  createdBy      String

  organization Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  company      Company?          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user         User              @relation(fields: [createdBy], references: [id])
  tasks        Task[]
  permissions  BoardPermission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organizationId, companyId, name])
  @@index([organizationId])
  @@index([companyId])
}

model BoardPermission {
  id               String  @id @default(cuid())
  boardId          String
  userId           String
  canView          Boolean @default(true)
  canEdit          Boolean @default(false)
  canManageMembers Boolean @default(false)

  board KanbanBoardConfig @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user  User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([boardId, userId])
  @@index([boardId])
  @@index([userId])
}

enum MeetingStatus {
  RECORDED
  TRANSCRIBED
  PROCESSED
  FAILED
}

model Meeting {
  id                    String        @id @default(cuid())
  organizationId        String
  companyId             String?
  title                 String?
  language              String?       @default("en")
  audioUrl              String?
  transcriptionProvider String?
  status                MeetingStatus @default(RECORDED)
  startedAt             DateTime      @default(now())
  endedAt               DateTime?
  createdBy             String

  organization Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  company      Company?            @relation(fields: [companyId], references: [id], onDelete: SetNull)
  creator      User                @relation(fields: [createdBy], references: [id])
  segments     TranscriptSegment[]
  tasks        Task[]
  notes        CompanyNote[]

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  AiJob              AiJob[]
  MeetingExtraction  MeetingExtraction[]
  MeetingParticipant MeetingParticipant[]

  @@index([organizationId, status])
}

model TranscriptSegment {
  id        String  @id @default(cuid())
  meetingId String
  startSec  Float
  endSec    Float
  speaker   String? // or "S1/S2/Unknown"
  text      String  @db.Text

  meeting Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  @@index([meetingId, startSec])
}

model MeetingParticipant {
  id          String  @id @default(cuid())
  meetingId   String
  userId      String?
  contactId   String?
  displayName String? // "Alice", "Bob", etc.
  email       String?
  speakerTag  String? // "S0", "S1" from diarization

  meeting Meeting         @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  user    User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  contact CompanyContact? @relation(fields: [contactId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([meetingId])
  @@index([email])
}

enum ExtractionStatus {
  PENDING
  COMPLETE
  FAILED
}

model MeetingExtraction {
  id        String           @id @default(cuid())
  meetingId String           @unique
  version   Int              @default(1)
  summary   String?          @db.Text
  decisions String?          @db.Text
  payload   Json? // full structured JSON (tasks, topics, entities)
  status    ExtractionStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  meeting Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
}

model AiJob {
  id           String    @id @default(cuid())
  meetingId    String?
  kind         String // "transcribe" | "extract"
  provider     String // "deepgram" | "openai"
  model        String
  inputTokens  Int?
  outputTokens Int?
  costMicros   Int? // store in micros to avoid float
  status       String    @default("DONE")
  error        String?
  startedAt    DateTime  @default(now())
  finishedAt   DateTime?

  meeting Meeting? @relation(fields: [meetingId], references: [id], onDelete: SetNull)

  @@index([meetingId])
}

model Folder {
  id             String  @id @default(cuid())
  organizationId String
  name           String
  description    String?

  parentId String?
  parent   Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children Folder[] @relation("FolderHierarchy")

  color          String?
  icon           String?
  isSystemFolder Boolean @default(false)

  createdBy      String
  createdByUser  User     @relation("FolderCreator", fields: [createdBy], references: [id])
  lastModifiedBy String?
  lastModifiedAt DateTime @updatedAt

  organization Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  documents    Document[]
  permissions  FolderPermission[]
  companyLinks FolderCompanyLink[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organizationId, parentId, name])
  @@index([organizationId])
  @@index([parentId])
}

model Document {
  id             String @id @default(cuid())
  organizationId String
  folderId       String

  fileName String
  fileUrl  String
  fileSize Int
  mimeType String

  description String? @db.Text
  tags        String?
  version     Int     @default(1)
  isTemplate  Boolean @default(false)

  fileHash   String?
  scanStatus String  @default("pending")
  scanResult Json?

  uploadedBy     String
  uploadedByUser User     @relation("DocumentUploader", fields: [uploadedBy], references: [id])
  lastModifiedBy String?
  lastModifiedAt DateTime @updatedAt

  organization Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  folder       Folder                @relation(fields: [folderId], references: [id], onDelete: Cascade)
  permissions  DocumentPermission[]
  companyLinks DocumentCompanyLink[]
  activities   DocumentActivity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
  @@index([folderId])
  @@index([uploadedBy])
}

model FolderPermission {
  id       String   @id @default(cuid())
  folderId String
  userId   String?
  role     OrgRole?

  canView        Boolean @default(true)
  canEdit        Boolean @default(false)
  canDelete      Boolean @default(false)
  canShare       Boolean @default(false)
  canManagePerms Boolean @default(false)

  folder Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)
  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([folderId, userId])
  @@unique([folderId, role])
  @@index([folderId])
  @@index([userId])
}

model DocumentPermission {
  id         String   @id @default(cuid())
  documentId String
  userId     String?
  role       OrgRole?

  canView   Boolean @default(true)
  canEdit   Boolean @default(false)
  canDelete Boolean @default(false)
  canShare  Boolean @default(false)

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user     User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([documentId, userId])
  @@unique([documentId, role])
  @@index([documentId])
  @@index([userId])
}

model FolderCompanyLink {
  id        String @id @default(cuid())
  folderId  String
  companyId String

  linkedBy String
  linkedAt DateTime @default(now())

  folder  Folder  @relation(fields: [folderId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [linkedBy], references: [id])

  @@unique([folderId, companyId])
  @@index([folderId])
  @@index([companyId])
}

model DocumentCompanyLink {
  id         String @id @default(cuid())
  documentId String
  companyId  String

  linkedBy String
  linkedAt DateTime @default(now())

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  company  Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [linkedBy], references: [id])

  @@unique([documentId, companyId])
  @@index([documentId])
  @@index([companyId])
}

model DocumentActivity {
  id         String  @id @default(cuid())
  documentId String
  userId     String
  action     String
  metadata   Json?
  ipAddress  String?
  userAgent  String?

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@index([documentId, createdAt])
  @@index([userId])
}

model CatalogSettings {
  id             String           @id @default(cuid())
  organizationId String           @unique
  currency       String           @default("EUR")
  currencyMode   CurrencyStrategy @default(ORG_DEFAULT)
  priceBasis     PriceBasis       @default(EXCLUSIVE)
  rounding       Json?
  numberFormats  Json?
  invoiceHooks   Json?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Unit {
  id             String   @id @default(cuid())
  organizationId String
  code           String
  label          String
  kind           UnitKind @default(UNIT)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization  Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  rateCardItems RateCardItem[]
  priceEntries  PriceBookEntry[]
  Product       Product[]

  @@unique([organizationId, code])
  @@index([organizationId, isActive])
}

model ProductCategory {
  id             String            @id @default(cuid())
  organizationId String
  name           String
  slug           String?
  parentId       String?
  parent         ProductCategory?  @relation("CategoryTree", fields: [parentId], references: [id], onDelete: Cascade)
  children       ProductCategory[] @relation("CategoryTree")
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  Product      Product[]

  @@unique([organizationId, parentId, name])
  @@unique([organizationId, slug])
  @@index([organizationId])
}

/// ---------- Products ----------
model Product {
  id             String      @id @default(cuid())
  organizationId String
  type           ProductType @default(SERVICE)
  name           String
  slug           String?
  sku            String?
  description    String?     @db.Text
  categoryId     String?
  unitId         String?
  isActive       Boolean     @default(true)
  glCode         String?
  taxClassId     String?
  defaultCost    Decimal?    @db.Decimal(12, 2)

  createdBy String
  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  category     ProductCategory?   @relation(fields: [categoryId], references: [id])
  unit         Unit?              @relation(fields: [unitId], references: [id])
  taxClass     TaxClass?          @relation(fields: [taxClassId], references: [id])
  variants     ProductVariant[]
  media        ProductMedia[]
  attributes   ProductAttribute[]
  priceEntries PriceBookEntry[]

  // ✅ Fixed bundle relations:
  // this product as the bundle PARENT (contains children)
  bundleChildren BundleItem[] @relation("BundleParent")
  // this product as the CHILD (included in a parent bundle)
  bundleParents  BundleItem[] @relation("BundleChild")

  rateCardItems RateCardItem[]

  @@unique([organizationId, slug])
  @@unique([organizationId, sku])
  @@index([organizationId, isActive])
  @@index([organizationId, name])
}

model ProductVariant {
  id         String   @id @default(cuid())
  productId  String
  sku        String?
  name       String?
  attributes Json?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  product      Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  priceEntries PriceBookEntry[]

  @@unique([productId, sku])
  @@index([productId, isActive])
}

model ProductAttribute {
  id        String   @id @default(cuid())
  productId String
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId, key])
}

model ProductMedia {
  id        String  @id @default(cuid())
  productId String
  url       String
  kind      String?
  alt       String?
  order     Int     @default(0)

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

/// ---------- Bundles (Product ↔ Product with quantity) ----------
model BundleItem {
  id              String  @id @default(cuid())
  bundleProductId String
  childProductId  String
  quantity        Decimal @db.Decimal(12, 3)

  bundle Product @relation("BundleParent", fields: [bundleProductId], references: [id], onDelete: Cascade)
  child  Product @relation("BundleChild", fields: [childProductId], references: [id], onDelete: Restrict)

  @@unique([bundleProductId, childProductId])
  @@index([bundleProductId])
  @@index([childProductId])
}

/// ---------- Price Books ----------
model PriceBook {
  id             String     @id @default(cuid())
  organizationId String
  name           String
  currency       String
  priceBasis     PriceBasis @default(EXCLUSIVE)
  isDefault      Boolean    @default(false)
  isActive       Boolean    @default(true)
  validFrom      DateTime?
  validTo        DateTime?
  tags           String?
  createdBy      String
  updatedBy      String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  organization Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  entries      PriceBookEntry[]

  @@unique([organizationId, name])
  @@index([organizationId, isActive])
}

model PriceBookEntry {
  id          String    @id @default(cuid())
  priceBookId String
  productId   String?
  variantId   String?
  unitPrice   Decimal   @db.Decimal(12, 2)
  unitId      String?
  minQty      Decimal?  @db.Decimal(12, 3)
  maxQty      Decimal?  @db.Decimal(12, 3)
  discountPct Decimal?  @db.Decimal(5, 2)
  validFrom   DateTime?
  validTo     DateTime?

  priceBook PriceBook       @relation(fields: [priceBookId], references: [id], onDelete: Cascade)
  product   Product?        @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  unit      Unit?           @relation(fields: [unitId], references: [id])
  // Note: DB can't enforce "productId XOR variantId" in Prisma; enforce in app/service layer

  @@index([priceBookId])
  @@index([productId])
  @@index([variantId])
}

/// ---------- Rate Cards (services/roles/users) ----------
model RateCard {
  id             String    @id @default(cuid())
  organizationId String
  name           String
  currency       String    @default("EUR")
  isDefault      Boolean   @default(false)
  isActive       Boolean   @default(true)
  validFrom      DateTime?
  validTo        DateTime?
  createdBy      String
  updatedBy      String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  organization Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  items        RateCardItem[]

  @@unique([organizationId, name])
  @@index([organizationId, isActive])
}

model RateCardItem {
  id         String    @id @default(cuid())
  rateCardId String
  role       OrgRole?
  userId     String?
  unitId     String
  unitPrice  Decimal   @db.Decimal(12, 2)
  productId  String?
  validFrom  DateTime?
  validTo    DateTime?

  rateCard RateCard @relation(fields: [rateCardId], references: [id], onDelete: Cascade)
  user     User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  product  Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  unit     Unit     @relation(fields: [unitId], references: [id])

  @@index([rateCardId])
}

/// ---------- Taxes ----------
model TaxClass {
  id             String   @id @default(cuid())
  organizationId String
  name           String
  description    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  rules        TaxRule[]
  Product      Product[]

  @@unique([organizationId, name])
}

model TaxRule {
  id             String    @id @default(cuid())
  organizationId String
  taxClassId     String
  name           String
  rate           Decimal   @db.Decimal(5, 2) // 0..100
  country        String?
  region         String?
  postalPattern  String?
  isCompound     Boolean   @default(false)
  priority       Int       @default(0)
  isActive       Boolean   @default(true)
  validFrom      DateTime?
  validTo        DateTime?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  taxClass     TaxClass     @relation(fields: [taxClassId], references: [id], onDelete: Cascade)

  @@index([organizationId, isActive])
  @@index([taxClassId])
}

model Quote {
  id             String      @id @default(cuid())
  organizationId String
  number         String      @unique // e.g. Q-2025-00012 (server fills)
  status         QuoteStatus @default(DRAFT)
  currency       String
  priceBookId    String?
  companyId      String?
  contactId      String?
  validUntil     DateTime?
  notesInternal  String?     @db.Text
  notesCustomer  String?     @db.Text

  // Snapshotted rollup totals (server writes)
  subtotal Decimal @default(0) @db.Decimal(14, 2)
  taxTotal Decimal @default(0) @db.Decimal(14, 2)
  total    Decimal @default(0) @db.Decimal(14, 2)

  createdBy String
  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  company      Company?         @relation(fields: [companyId], references: [id], onDelete: SetNull)
  contact      CompanyContact?  @relation(fields: [contactId], references: [id], onDelete: SetNull)
  lines        QuoteLine[]
  invoice      Invoice?
}

model QuoteLine {
  id           String   @id @default(cuid())
  quoteId      String
  // Link + snapshot (we store both the ids and frozen text/price for audit)
  productId    String?
  variantId    String?
  sku          String?
  name         String // frozen display name
  description  String?  @db.Text
  unitId       String?
  unitLabel    String? // frozen
  quantity     Decimal  @default(1) @db.Decimal(12, 3)
  unitPrice    Decimal  @db.Decimal(12, 2) // net, excl tax (after discounts)
  discountPct  Decimal? @db.Decimal(5, 2)
  taxClassId   String?
  taxRatePct   Decimal? @db.Decimal(6, 3) // effective
  taxAmount    Decimal  @default(0) @db.Decimal(12, 2)
  lineSubtotal Decimal  @default(0) @db.Decimal(12, 2)
  lineTotal    Decimal  @default(0) @db.Decimal(12, 2)
  position     Int      @default(0)

  quote Quote @relation(fields: [quoteId], references: [id], onDelete: Cascade)
}

model Invoice {
  id             String        @id @default(cuid())
  organizationId String
  number         String        @unique // e.g. INV-2025-00001
  status         InvoiceStatus @default(DRAFT)

  // Reference to source
  quoteId String? @unique // One quote can only have one invoice

  // Customer info (snapshot at time of invoice)
  companyId      String?
  contactId      String?
  billingAddress Json? // Snapshot of address

  // Dates
  issueDate DateTime  @default(now())
  dueDate   DateTime // Payment due date
  paidDate  DateTime? // When fully paid

  // Financial
  currency   String
  subtotal   Decimal @db.Decimal(14, 2)
  taxTotal   Decimal @db.Decimal(14, 2)
  total      Decimal @db.Decimal(14, 2)
  amountPaid Decimal @default(0) @db.Decimal(14, 2)
  amountDue  Decimal @db.Decimal(14, 2) // computed: total - amountPaid

  // Notes
  notesInternal String? @db.Text
  notesCustomer String? @db.Text
  paymentTerms  String? // e.g. "Net 30"

  // Metadata
  createdBy String
  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organization Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  quote        Quote?          @relation(fields: [quoteId], references: [id])
  company      Company?        @relation(fields: [companyId], references: [id])
  contact      CompanyContact? @relation(fields: [contactId], references: [id])
  creator      User            @relation("InvoiceCreator", fields: [createdBy], references: [id])
  updater      User?           @relation("InvoiceUpdater", fields: [updatedBy], references: [id])
  lines        InvoiceLine[]
  payments     Payment[]

  @@index([organizationId])
  @@index([companyId])
  @@index([status])
  @@index([dueDate])
}

model InvoiceLine {
  id        String @id @default(cuid())
  invoiceId String

  // Product/service info (all snapshot for immutability)
  productId   String?
  variantId   String?
  sku         String?
  name        String // frozen display name
  description String? @db.Text
  unitId      String?
  unitLabel   String? // frozen unit label

  // Financial
  quantity     Decimal  @db.Decimal(12, 3)
  unitPrice    Decimal  @db.Decimal(12, 2) // net, excl tax
  discountPct  Decimal? @db.Decimal(5, 2)
  taxRatePct   Decimal? @db.Decimal(6, 3) // effective tax rate
  taxAmount    Decimal  @default(0) @db.Decimal(12, 2)
  lineSubtotal Decimal  @default(0) @db.Decimal(12, 2)
  lineTotal    Decimal  @default(0) @db.Decimal(12, 2)
  position     Int      @default(0)

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model Payment {
  id             String        @id @default(cuid())
  organizationId String
  invoiceId      String
  amount         Decimal       @db.Decimal(14, 2)
  currency       String
  method         PaymentMethod
  reference      String? // Check number, transaction ID, etc.
  receivedDate   DateTime
  notes          String?       @db.Text

  // Metadata
  createdBy String
  createdAt DateTime @default(now())

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invoice      Invoice      @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  creator      User         @relation(fields: [createdBy], references: [id])

  @@index([organizationId])
  @@index([invoiceId])
}
